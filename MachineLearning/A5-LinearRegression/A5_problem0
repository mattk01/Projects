{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j9aYW4Ydyil-"
      },
      "source": [
        "# Linear Regression Tutorial\n",
        "by Marc Deisenroth"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Bu5sIRAQyimD"
      },
      "source": [
        "The purpose of this notebook is to practice implementing some linear algebra (equations provided) and to explore some properties of linear regression."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "dX1UeXz8yimE"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import scipy.linalg\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gw2JooDbyimF"
      },
      "source": [
        "We consider a linear regression problem of the form\n",
        "$$\n",
        "y = \\boldsymbol x^T\\boldsymbol\\theta + \\epsilon\\,,\\quad \\epsilon \\sim \\mathcal N(0, \\sigma^2)\n",
        "$$\n",
        "where $\\boldsymbol x\\in\\mathbb{R}^D$ are inputs and $y\\in\\mathbb{R}$ are noisy observations. The parameter vector $\\boldsymbol\\theta\\in\\mathbb{R}^D$ parametrizes the function.\n",
        "\n",
        "We assume we have a training set $(\\boldsymbol x_n, y_n)$, $n=1,\\ldots, N$. We summarize the sets of training inputs in $\\mathcal X = \\{\\boldsymbol x_1, \\ldots, \\boldsymbol x_N\\}$ and corresponding training targets $\\mathcal Y = \\{y_1, \\ldots, y_N\\}$, respectively.\n",
        "\n",
        "In this tutorial, we are interested in finding good parameters $\\boldsymbol\\theta$."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "VpIJw2BZyimG",
        "outputId": "87be94d6-12a4-4a01-a76e-75804fc5592a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Define training set\n",
        "X = np.array([-3, -1, 0, 1, 3]).reshape(-1,1) # 5x1 vector, N=5, D=1\n",
        "y = np.array([-1.2, -0.7, 0.14, 0.67, 1.67]).reshape(-1,1) # 5x1 vector\n",
        "\n",
        "# Plot the training set\n",
        "plt.figure()\n",
        "plt.plot(X, y, '+', markersize=10)\n",
        "plt.xlabel(\"$x$\")\n",
        "plt.ylabel(\"$y$\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vHxc0HIJyimI"
      },
      "source": [
        "## 1. Maximum Likelihood\n",
        "We will start with maximum likelihood estimation of the parameters $\\boldsymbol\\theta$. In maximum likelihood estimation, we find the parameters $\\boldsymbol\\theta^{\\mathrm{ML}}$ that maximize the likelihood\n",
        "$$\n",
        "p(\\mathcal Y | \\mathcal X, \\boldsymbol\\theta) = \\prod_{n=1}^N p(y_n | \\boldsymbol x_n, \\boldsymbol\\theta)\\,.\n",
        "$$\n",
        "From the lecture we know that the maximum likelihood estimator is given by\n",
        "$$\n",
        "\\boldsymbol\\theta^{\\text{ML}} = (\\boldsymbol X^T\\boldsymbol X)^{-1}\\boldsymbol X^T\\boldsymbol y\\in\\mathbb{R}^D\\,,\n",
        "$$\n",
        "where \n",
        "$$\n",
        "\\boldsymbol X = [\\boldsymbol x_1, \\ldots, \\boldsymbol x_N]^T\\in\\mathbb{R}^{N\\times D}\\,,\\quad \\boldsymbol y = [y_1, \\ldots, y_N]^T \\in\\mathbb{R}^N\\,.\n",
        "$$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oalh7WfbyimI"
      },
      "source": [
        "Let us compute the maximum likelihood estimate for a given training set"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "QnHaaVZWyimJ"
      },
      "outputs": [],
      "source": [
        "## EDIT THIS FUNCTION\n",
        "def max_lik_estimate(X, y):\n",
        "    \n",
        "    # X: N x D matrix of training inputs\n",
        "    # y: N x 1 vector of training targets/observations\n",
        "    # returns: maximum likelihood parameters (D x 1)\n",
        "    \n",
        "    N, D = X.shape\n",
        "    theta_ml = np.dot(np.dot(np.linalg.inv(np.dot(X.T,X)), X.T), y) \n",
        "    # theta_ml = np.zeros((D,1)) ## <-- EDIT THIS LINE\n",
        "    return theta_ml"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "XQrS0ST0yimJ"
      },
      "outputs": [],
      "source": [
        "# get maximum likelihood estimate\n",
        "theta_ml = max_lik_estimate(X,y)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pST3szjhyimK"
      },
      "source": [
        "Now, make a prediction using the maximum likelihood estimate that we just found"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "UjIPky_4yimK"
      },
      "outputs": [],
      "source": [
        "## EDIT THIS FUNCTION\n",
        "def predict_with_estimate(Xtest, theta):\n",
        "    \n",
        "    # Xtest: K x D matrix of test inputs\n",
        "    # theta: D x 1 vector of parameters\n",
        "    # returns: prediction of f(Xtest); K x 1 vector\n",
        "    \n",
        "    # prediction = Xtest ## <-- EDIT THIS LINE\n",
        "    prediction = np.dot(Xtest, theta) \n",
        "    \n",
        "    return prediction "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "loLhp8nyyimK"
      },
      "source": [
        "Now, let's see whether we got something useful:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "FeX7qnOVyimL",
        "outputId": "63907b58-36bd-49d5-927d-108af60c7561",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# define a test set\n",
        "Xtest = np.linspace(-5,5,100).reshape(-1,1) # 100 x 1 vector of test inputs\n",
        "\n",
        "# predict the function values at the test points using the maximum likelihood estimator\n",
        "ml_prediction = predict_with_estimate(Xtest, theta_ml)\n",
        "\n",
        "# plot\n",
        "plt.figure()\n",
        "plt.plot(X, y, '+', markersize=10)\n",
        "plt.plot(Xtest, ml_prediction)\n",
        "plt.xlabel(\"$x$\")\n",
        "plt.ylabel(\"$y$\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UhLM6LxgyimL"
      },
      "source": [
        "#### Questions\n",
        "1. Does the solution above look reasonable?\n",
        "2. Play around with different values of $\\theta$. How do the corresponding functions change?\n",
        "3. Modify the training targets $\\mathcal Y$ and re-run your computation. What changes?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SToHwlunyimM"
      },
      "source": [
        "Let us now look at a different training set, where we add 2.0 to every $y$-value, and compute the maximum likelihood estimate"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "YW1c6JXFyimM",
        "outputId": "9f1763d8-1ef1-4ba7-d5c3-bc5250898721",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "ynew = y + 2.0\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(X, ynew, '+', markersize=10)\n",
        "plt.xlabel(\"$x$\")\n",
        "plt.ylabel(\"$y$\");"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "CQdSjlKbyimN",
        "outputId": "46dd61e0-fbc8-4a3c-bed9-fdf46d893750",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.499]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# get maximum likelihood estimate\n",
        "theta_ml = max_lik_estimate(X, ynew)\n",
        "print(theta_ml)\n",
        "\n",
        "# define a test set\n",
        "Xtest = np.linspace(-5,5,100).reshape(-1,1) # 100 x 1 vector of test inputs\n",
        "\n",
        "# predict the function values at the test points using the maximum likelihood estimator\n",
        "ml_prediction = predict_with_estimate(Xtest, theta_ml)\n",
        "\n",
        "# plot\n",
        "plt.figure()\n",
        "plt.plot(X, ynew, '+', markersize=10)\n",
        "plt.plot(Xtest, ml_prediction)\n",
        "plt.xlabel(\"$x$\")\n",
        "plt.ylabel(\"$y$\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VZ6lkIvayimN"
      },
      "source": [
        "#### Question:\n",
        "1. This maximum likelihood estimate doesn't look too good: The orange line is too far away from the observations although we just shifted them by 2. Why is this the case?\n",
        "2. How can we fix this problem?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FqObxFaQyimO"
      },
      "source": [
        "Let us now define a linear regression model that is slightly more flexible:\n",
        "$$\n",
        "y = \\theta_0 + \\boldsymbol x^T \\boldsymbol\\theta_1 + \\epsilon\\,,\\quad \\epsilon\\sim\\mathcal N(0,\\sigma^2)\n",
        "$$\n",
        "Here, we added an offset (bias) parameter $\\theta_0$ to our original model."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E_GpahtLyimO"
      },
      "source": [
        "#### Question:\n",
        "1. What is the effect of this bias parameter, i.e., what additional flexibility does it offer?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KYUV_fyXyimP"
      },
      "source": [
        "If we now define the inputs to be the augmented vector $\\boldsymbol x_{\\text{aug}} = \\begin{bmatrix}1\\\\\\boldsymbol x\\end{bmatrix}$, we can write the new linear regression model as \n",
        "$$\n",
        "y = \\boldsymbol x_{\\text{aug}}^T\\boldsymbol\\theta_{\\text{aug}} + \\epsilon\\,,\\quad \\boldsymbol\\theta_{\\text{aug}} = \\begin{bmatrix}\n",
        "\\theta_0\\\\\n",
        "\\boldsymbol\\theta_1\n",
        "\\end{bmatrix}\\,.\n",
        "$$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "9iFpGX8lyimP"
      },
      "outputs": [],
      "source": [
        "N, D = X.shape\n",
        "X_aug = np.hstack([np.ones((N,1)), X]) # augmented training inputs of size N x (D+1)\n",
        "theta_aug = np.zeros((D+1, 1)) # new theta vector of size (D+1) x 1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5PeSb0xNyimQ"
      },
      "source": [
        "Let us now compute the maximum likelihood estimator for this setting.\n",
        "_Hint:_ If possible, re-use code that you have already written"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "93p3OLEXyimQ"
      },
      "outputs": [],
      "source": [
        "## EDIT THIS FUNCTION\n",
        "def max_lik_estimate_aug(X_aug, y):\n",
        "    \n",
        "    # theta_aug_ml = np.zeros((D+1,1)) ## <-- EDIT THIS LINE\n",
        "    theta_aug_ml = max_lik_estimate(X_aug, y) \n",
        "    \n",
        "    return theta_aug_ml"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "rm8prAVTyimR"
      },
      "outputs": [],
      "source": [
        "theta_aug_ml = max_lik_estimate_aug(X_aug, y)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FEcX6-fZyimR"
      },
      "source": [
        "Now, we can make predictions again:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "BgerlGc7yimR",
        "outputId": "bd236121-90d7-40c4-a423-ba846c290a92",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# define a test set (we also need to augment the test inputs with ones)\n",
        "Xtest_aug = np.hstack([np.ones((Xtest.shape[0],1)), Xtest]) # 100 x (D + 1) vector of test inputs\n",
        "\n",
        "# predict the function values at the test points using the maximum likelihood estimator\n",
        "ml_prediction = predict_with_estimate(Xtest_aug, theta_aug_ml)\n",
        "\n",
        "# plot\n",
        "plt.figure()\n",
        "plt.plot(X, y, '+', markersize=10)\n",
        "plt.plot(Xtest, ml_prediction)\n",
        "plt.xlabel(\"$x$\")\n",
        "plt.ylabel(\"$y$\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MWwa_xebyimS"
      },
      "source": [
        "It seems this has solved our problem! \n",
        "#### Question:\n",
        "1. Play around with the first parameter of $\\boldsymbol\\theta_{\\text{aug}}$ and see how the fit of the function changes.\n",
        "2. Play around with the second parameter of $\\boldsymbol\\theta_{\\text{aug}}$ and see how the fit of the function changes."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WbTNEJZ2yimS"
      },
      "source": [
        "### Nonlinear Features\n",
        "So far, we have looked at linear regression with linear features. This allowed us to fit straight lines. However, linear regression also allows us to fit functions that are nonlinear in the inputs $\\boldsymbol x$, as long as the parameters $\\boldsymbol\\theta$ appear linearly. This means, we can learn functions of the form\n",
        "$$\n",
        "f(\\boldsymbol x, \\boldsymbol\\theta) = \\sum_{k = 1}^K \\theta_k \\phi_k(\\boldsymbol x)\\,,\n",
        "$$\n",
        "where the features $\\phi_k(\\boldsymbol x)$ are (possibly nonlinear) transformations of the inputs $\\boldsymbol x$.\n",
        "\n",
        "Let us have a look at an example where the observations clearly do not lie on a straight line:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "507w-1igyimS",
        "outputId": "0fb4693e-353f-4788-f78c-d12faaa9be2b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "y = np.array([10.05, 1.5, -1.234, 0.02, 8.03]).reshape(-1,1)\n",
        "plt.figure()\n",
        "plt.plot(X, y, '+')\n",
        "plt.xlabel(\"$x$\")\n",
        "plt.ylabel(\"$y$\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_inzc2FRyimT"
      },
      "source": [
        "#### Polynomial Regression\n",
        "One class of functions that is covered by linear regression is the family of polynomials because we can write a polynomial of degree $K$ as\n",
        "$$\n",
        "\\sum_{k=0}^K \\theta_k x^k = \\boldsymbol \\phi(x)^T\\boldsymbol\\theta\\,,\\quad\n",
        "\\boldsymbol\\phi(x)= \n",
        "\\begin{bmatrix}\n",
        "x^0\\\\\n",
        "x^1\\\\\n",
        "\\vdots\\\\\n",
        "x^K\n",
        "\\end{bmatrix}\\in\\mathbb{R}^{K+1}\\,.\n",
        "$$\n",
        "Here, $\\boldsymbol\\phi(x)$ is a nonlinear feature transformation of the inputs $x\\in\\mathbb{R}$.\n",
        "\n",
        "Similar to the earlier case we can define a matrix that collects all the feature transformations of the training inputs:\n",
        "$$\n",
        "\\boldsymbol\\Phi = \\begin{bmatrix}\n",
        "\\boldsymbol\\phi(x_1) & \\boldsymbol\\phi(x_2) & \\cdots & \\boldsymbol\\phi(x_n)\n",
        "\\end{bmatrix}^T \\in\\mathbb{R}^{N\\times K+1}\n",
        "$$"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pCO7s7KKyimT"
      },
      "source": [
        "Let us start by computing the feature matrix $\\boldsymbol \\Phi$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "u9V7WENeyimU"
      },
      "outputs": [],
      "source": [
        "## EDIT THIS FUNCTION\n",
        "def poly_features(X, K):\n",
        "    \n",
        "    # X: inputs of size N x 1\n",
        "    # K: degree of the polynomial\n",
        "    # computes the feature matrix Phi (N x (K+1))\n",
        "    \n",
        "    X = X.flatten()\n",
        "    N = X.shape[0]\n",
        "    \n",
        "    #initialize Phi\n",
        "    Phi = np.zeros((N, K+1))\n",
        "    \n",
        "    # Compute the feature matrix in stages\n",
        "    for k in range(K+1):\n",
        "        Phi[:,k] = X**k\n",
        "    return Phi"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rhHNTzdayimV"
      },
      "source": [
        "With this feature matrix we get the maximum likelihood estimator as\n",
        "$$\n",
        "\\boldsymbol \\theta^\\text{ML} = (\\boldsymbol\\Phi^T\\boldsymbol\\Phi)^{-1}\\boldsymbol\\Phi^T\\boldsymbol y\n",
        "$$\n",
        "For reasons of numerical stability, we often add a small diagonal \"jitter\" $\\kappa>0$ to $\\boldsymbol\\Phi^T\\boldsymbol\\Phi$ so that we can invert the matrix without significant problems so that the maximum likelihood estimate becomes\n",
        "$$\n",
        "\\boldsymbol \\theta^\\text{ML} = (\\boldsymbol\\Phi^T\\boldsymbol\\Phi + \\kappa\\boldsymbol I)^{-1}\\boldsymbol\\Phi^T\\boldsymbol y\n",
        "$$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "bguTGqtIyimW"
      },
      "outputs": [],
      "source": [
        "## EDIT THIS FUNCTION\n",
        "def nonlinear_features_maximum_likelihood(Phi, y):\n",
        "    # Phi: features matrix for training inputs. Size of N x D\n",
        "    # y: training targets. Size of N by 1\n",
        "    # returns: maximum likelihood estimator theta_ml. Size of D x 1\n",
        "    \n",
        "    kappa = 1e-08 # 'jitter' term; good for numerical stability\n",
        "    \n",
        "    D = Phi.shape[1]  \n",
        "    \n",
        "    # maximum likelihood estimate\n",
        "    Pt = np.dot(Phi.T, y) # Phi^T*y\n",
        "    PP = np.dot(Phi.T,Phi) + kappa*np.eye(D) \n",
        "        \n",
        "    # maximum likelihood estimate\n",
        "    C = scipy.linalg.cho_factor(PP)\n",
        "    theta_ml = scipy.linalg.cho_solve(C, Pt) \n",
        "    \n",
        "    return theta_ml"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AdNKKKFsyimX"
      },
      "source": [
        "Now we have all the ingredients together: The computation of the feature matrix and the computation of the maximum likelihood estimator for polynomial regression. Let's see how this works.\n",
        "\n",
        "To make predictions at test inputs $\\boldsymbol X_{\\text{test}}\\in\\mathbb{R}$, we need to compute the features (nonlinear transformations) $\\boldsymbol\\Phi_{\\text{test}}= \\boldsymbol\\phi(\\boldsymbol X_{\\text{test}})$ of $\\boldsymbol X_{\\text{test}}$ to give us the predicted mean\n",
        "$$\n",
        "\\mathbb{E}[\\boldsymbol y_{\\text{test}}] = \\boldsymbol \\Phi_{\\text{test}}\\boldsymbol\\theta^{\\text{ML}}\n",
        "$$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "J6n85qqTyimY",
        "outputId": "29b6d30f-587b-4d81-90de-0b3064d4cdf5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "K = 5 # Define the degree of the polynomial we wish to fit\n",
        "Phi = poly_features(X, K) # N x (K+1) feature matrix\n",
        "\n",
        "theta_ml = nonlinear_features_maximum_likelihood(Phi, y) # maximum likelihood estimator\n",
        "\n",
        "# test inputs\n",
        "Xtest = np.linspace(-4,4,100).reshape(-1,1)\n",
        "\n",
        "# feature matrix for test inputs\n",
        "Phi_test = poly_features(Xtest, K)\n",
        "\n",
        "y_pred = Phi_test @ theta_ml # predicted y-values\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(X, y, '+')\n",
        "plt.plot(Xtest, y_pred)\n",
        "plt.xlabel(\"$x$\")\n",
        "plt.ylabel(\"$y$\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yAlA9nqqyimZ"
      },
      "source": [
        "Experiment with different polynomial degrees in the code above.\n",
        "#### Questions:\n",
        "1. What do you observe?\n",
        "2. What is a good fit?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qFZDDaHCyimZ"
      },
      "source": [
        "## Evaluating the Quality of the Model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "grAP8T_yyimZ"
      },
      "source": [
        "Let us have a look at a more interesting data set"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "4LXQMWxTyimZ",
        "outputId": "0273ba51-d17a-47df-9a11-1deee228d64b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "def f(x):   \n",
        "    return np.cos(x) + 0.2*np.random.normal(size=(x.shape))\n",
        "\n",
        "X = np.linspace(-4,4,20).reshape(-1,1)\n",
        "y = f(X)\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(X, y, '+')\n",
        "plt.xlabel(\"$x$\")\n",
        "plt.ylabel(\"$y$\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tGd5MLpPyima"
      },
      "source": [
        "Now, let us use the work from above and fit polynomials to this dataset."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "QgoNEWxVyimb",
        "outputId": "d69203de-447f-49ab-de2e-3cc314247380",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "## EDIT THIS CELL\n",
        "K = 2 # Define the degree of the polynomial we wish to fit\n",
        "\n",
        "Phi = poly_features(X, K) # N x (K+1) feature matrix\n",
        "\n",
        "theta_ml = nonlinear_features_maximum_likelihood(Phi, y) # maximum likelihood estimator\n",
        "\n",
        "# test inputs\n",
        "Xtest = np.linspace(-5,5,100).reshape(-1,1)\n",
        "ytest = f(Xtest) # ground-truth y-values\n",
        "\n",
        "\n",
        "Phi_test = poly_features(Xtest, K)\n",
        "\n",
        "y_pred = np.dot(Phi_test, theta_ml)\n",
        "\n",
        "# plot\n",
        "plt.figure()\n",
        "plt.plot(X, y, '+')\n",
        "plt.plot(Xtest, y_pred)\n",
        "plt.plot(Xtest, ytest)\n",
        "plt.legend([\"data\", \"prediction\", \"ground truth observations\"])\n",
        "plt.xlabel(\"$x$\")\n",
        "plt.ylabel(\"$y$\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y9f8yYTsyimb"
      },
      "source": [
        "#### Questions:\n",
        "1. Try out different degrees of polynomials. \n",
        "2. Based on visual inspection, what looks like the best fit?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2039PSXMyimc"
      },
      "source": [
        "Let us now look at a more systematic way to assess the quality of the polynomial that we are trying to fit. For this, we compute the root-mean-squared-error (RMSE) between the $y$-values predicted by our polynomial and the ground-truth $y$-values. The RMSE is then defined as\n",
        "$$\n",
        "\\text{RMSE} = \\sqrt{\\frac{1}{N}\\sum_{n=1}^N(y_n - y_n^\\text{pred})^2}\n",
        "$$\n",
        "Write a function that computes the RMSE."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "NHlV-oS3yimc"
      },
      "outputs": [],
      "source": [
        "## EDIT THIS FUNCTION\n",
        "def RMSE(y, ypred):\n",
        "    rmse = np.sqrt(np.mean((y-ypred)**2))\n",
        "    return rmse"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "583Ozcjlyimc"
      },
      "source": [
        "Now compute the RMSE for different degrees of the polynomial we want to fit."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "ulh-NOCjyimc",
        "outputId": "eae94509-1785-4300-bb13-9360b42638af",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "## EDIT THIS CELL\n",
        "K_max = 20\n",
        "rmse_train = np.zeros((K_max+1,))\n",
        "\n",
        "for k in range(K_max+1):\n",
        "    \n",
        "     \n",
        "\n",
        "    Phi = poly_features(X, k)\n",
        "    theta_ml = nonlinear_features_maximum_likelihood(Phi, y)\n",
        "    \n",
        "    ypred_train = np.dot(Phi, theta_ml)\n",
        "    rmse_train[k] = RMSE(y, ypred_train)\n",
        "    \n",
        "\n",
        "plt.figure()\n",
        "plt.plot(rmse_train)\n",
        "plt.xlabel(\"degree of polynomial\")\n",
        "plt.ylabel(\"RMSE\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5mQLHSdVyimd"
      },
      "source": [
        "#### Question: \n",
        "1. What do you observe?\n",
        "2. What is the best polynomial fit according to this plot?\n",
        "3. Write some code that plots the function that uses the best polynomial degree (use the test set for this plot). What do you observe now?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "9chxV-2Tyimd",
        "outputId": "d9965959-f84b-45da-f3c0-a09d456d2dc3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# WRITE THE PLOTTING CODE HERE\n",
        "plt.figure()\n",
        "plt.plot(X, y, '+')\n",
        "\n",
        "# feature matrix\n",
        "Phi = poly_features(X, 5)\n",
        "\n",
        "# maximum likelihood estimate\n",
        "theta_ml = nonlinear_features_maximum_likelihood(Phi, y)   \n",
        "\n",
        "# feature matrix for test inputs\n",
        "Phi_test = poly_features(Xtest, 5)\n",
        "\n",
        "ypred_test = Phi_test @ theta_ml\n",
        "\n",
        "plt.plot(Xtest, ypred_test) \n",
        "plt.xlabel(\"$x$\")\n",
        "plt.ylabel(\"$y$\")\n",
        "plt.legend([\"data\", \"maximum likelihood fit\"]);"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1DeHEvWbyimd"
      },
      "source": [
        "The RMSE on the training data is somewhat misleading, because we are interested in the generalization performance of the model. Therefore, we are going to compute the RMSE on the test set and use this to choose a good polynomial degree."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "3aIRwvXsyimd",
        "outputId": "dc24d331-a969-4ec5-952b-c67809a7c1f3",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "## EDIT THIS CELL\n",
        "K_max = 20\n",
        "rmse_train = np.zeros((K_max+1,))\n",
        "rmse_test = np.zeros((K_max+1,))\n",
        "\n",
        "for k in range(K_max+1):\n",
        "    \n",
        "    # feature matrix\n",
        "    Phi = poly_features(X, k)\n",
        "    \n",
        "    # maximum likelihood estimate\n",
        "    theta_ml = nonlinear_features_maximum_likelihood(Phi, y)\n",
        "    \n",
        "    # predict y-values of training set\n",
        "    ypred_train = np.dot(Phi, theta_ml)\n",
        "    \n",
        "    # RMSE on training set\n",
        "    rmse_train[k] = RMSE(y, ypred_train)    \n",
        "    \n",
        "    # feature matrix for test inputs\n",
        "    Phi_test = poly_features(Xtest, k)\n",
        "    \n",
        "    # prediction (test set)\n",
        "    ypred_test = np.dot(Phi_test, theta_ml)\n",
        "    \n",
        "    # RMSE on test set\n",
        "    rmse_test[k] = RMSE(ytest, ypred_test)\n",
        "    \n",
        "\n",
        "plt.figure()\n",
        "plt.semilogy(rmse_train) # this plots the RMSE on a logarithmic scale\n",
        "plt.semilogy(rmse_test) # this plots the RMSE on a logarithmic scale\n",
        "plt.xlabel(\"degree of polynomial\")\n",
        "plt.ylabel(\"RMSE\")\n",
        "plt.legend([\"training set\", \"test set\"]);"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "my3tz_bvyime"
      },
      "source": [
        "#### Questions:\n",
        "1. What do you observe now?\n",
        "2. Why does the RMSE for the test set not always go down?\n",
        "3. Which polynomial degree would you choose now?\n",
        "4. Plot the fit for the \"best\" polynomial degree."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "LGziNrpXyime",
        "outputId": "3306aefd-5eb6-4f8e-b2a6-48940ca0013e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# WRITE THE PLOTTING CODE HERE\n",
        "plt.figure()\n",
        "plt.plot(X, y, '+')\n",
        "k = 5\n",
        "# feature matrix\n",
        "Phi = poly_features(X, k)\n",
        "\n",
        "# maximum likelihood estimate\n",
        "theta_ml = nonlinear_features_maximum_likelihood(Phi, y)   \n",
        "\n",
        "# feature matrix for test inputs\n",
        "Phi_test = poly_features(Xtest, k)\n",
        "\n",
        "ypred_test = Phi_test @ theta_ml\n",
        "\n",
        "plt.plot(Xtest, ypred_test) \n",
        "plt.xlabel(\"$x$\")\n",
        "plt.ylabel(\"$y$\")\n",
        "plt.legend([\"data\", \"maximum likelihood fit\"]);"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "w_JTjau8yime"
      },
      "source": [
        "#### Question\n",
        "If you did not have a designated test set, what could you do to estimate the generalization error (purely using the training set)?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vPUOBny7yimf"
      },
      "source": [
        "## 2. Maximum A Posteriori Estimation"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZmBy6WXlyimf"
      },
      "source": [
        "We are still considering the model\n",
        "$$\n",
        "y = \\boldsymbol\\phi(\\boldsymbol x)^T\\boldsymbol\\theta + \\epsilon\\,,\\quad \\epsilon\\sim\\mathcal N(0,\\sigma^2)\\,.\n",
        "$$\n",
        "We assume that the noise variance $\\sigma^2$ is known."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AN2QuhFfyimf"
      },
      "source": [
        "Instead of maximizing the likelihood, we can look at the maximum of the posterior distribution on the parameters $\\boldsymbol\\theta$, which is given as\n",
        "$$\n",
        "p(\\boldsymbol\\theta|\\mathcal X, \\mathcal Y) = \\frac{\\overbrace{p(\\mathcal Y|\\mathcal X, \\boldsymbol\\theta)}^{\\text{likelihood}}\\overbrace{p(\\boldsymbol\\theta)}^{\\text{prior}}}{\\underbrace{p(\\mathcal Y|\\mathcal X)}_{\\text{evidence}}}\n",
        "$$\n",
        "The purpose of the parameter prior $p(\\boldsymbol\\theta)$ is to discourage the parameters to attain extreme values, a sign that the model overfits. The prior allows us to specify a \"reasonable\" range of parameter values. Typically, we choose a Gaussian prior $\\mathcal N(\\boldsymbol 0, \\alpha^2\\boldsymbol I)$, centered at $\\boldsymbol 0$ with variance $\\alpha^2$ along each parameter dimension."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MAZ9DJ0Lyimg"
      },
      "source": [
        "The MAP estimate of the parameters is\n",
        "$$\n",
        "\\boldsymbol\\theta^{\\text{MAP}} = (\\boldsymbol\\Phi^T\\boldsymbol\\Phi + \\frac{\\sigma^2}{\\alpha^2}\\boldsymbol I)^{-1}\\boldsymbol\\Phi^T\\boldsymbol y\n",
        "$$\n",
        "where $\\sigma^2$ is the variance of the noise."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "jw6qDoMRyimg"
      },
      "outputs": [],
      "source": [
        "## EDIT THIS FUNCTION\n",
        "def map_estimate_poly(Phi, y, sigma, alpha):\n",
        "    # Phi: training inputs, Size of N x D\n",
        "    # y: training targets, Size of D x 1\n",
        "    # sigma: standard deviation of the noise \n",
        "    # alpha: standard deviation of the prior on the parameters\n",
        "    # returns: MAP estimate theta_map, Size of D x 1\n",
        "    \n",
        "    D = Phi.shape[1] \n",
        "    \n",
        "    theta_map = scipy.linalg.solve(np.dot(Phi.T, Phi) + (sigma/alpha)**2 * np.eye(D), np.dot(Phi.T, y))\n",
        "    \n",
        "    return theta_map"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "SFlQUjAyyimh"
      },
      "outputs": [],
      "source": [
        "# define the function we wish to estimate later\n",
        "def g(x, sigma):\n",
        "    p = np.hstack([x**0, x**1, np.sin(x)])\n",
        "    w = np.array([-1.0, 0.1, 1.0]).reshape(-1,1)\n",
        "    return p @ w + sigma*np.random.normal(size=x.shape) "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "1M3q6oXZyimh",
        "outputId": "36a822d8-cb29-4b56-e2cd-29a37d33f1bb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Generate some data\n",
        "sigma = 1.0 # noise standard deviation\n",
        "alpha = 1.0 # standard deviation of the parameter prior\n",
        "N = 20\n",
        "\n",
        "np.random.seed(42)\n",
        "\n",
        "X = (np.random.rand(N)*10.0 - 5.0).reshape(-1,1)\n",
        "y = g(X, sigma) # training targets\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(X, y, '+')\n",
        "plt.xlabel(\"$x$\")\n",
        "plt.ylabel(\"$y$\");"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "yFt71r0lyimi",
        "outputId": "06b134eb-e266-44f9-c501-0ea5c6b4f402",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# get the MAP estimate\n",
        "K = 8 # polynomial degree   \n",
        "\n",
        "\n",
        "# feature matrix\n",
        "Phi = poly_features(X, K)\n",
        "\n",
        "theta_map = map_estimate_poly(Phi, y, sigma, alpha)\n",
        "\n",
        "# maximum likelihood estimate\n",
        "theta_ml = nonlinear_features_maximum_likelihood(Phi, y)\n",
        "\n",
        "Xtest = np.linspace(-5,5,100).reshape(-1,1)\n",
        "ytest = g(Xtest, sigma)\n",
        "\n",
        "Phi_test = poly_features(Xtest, K)\n",
        "y_pred_map = Phi_test @ theta_map\n",
        "\n",
        "y_pred_mle = Phi_test @ theta_ml\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(X, y, '+')\n",
        "plt.plot(Xtest, y_pred_map)\n",
        "plt.plot(Xtest, g(Xtest, 0))\n",
        "plt.plot(Xtest, y_pred_mle)\n",
        "\n",
        "plt.legend([\"data\", \"map prediction\", \"ground truth function\", \"maximum likelihood\"]);"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "lZ3Eb0Qzyimi",
        "outputId": "a5743376-7e9a-4d53-eacc-748314f47148",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[-1.49712990e+00 -1.08154986e+00]\n",
            " [ 8.56868912e-01  6.09177023e-01]\n",
            " [-1.28335730e-01 -3.62071208e-01]\n",
            " [-7.75319509e-02 -3.70531732e-03]\n",
            " [ 3.56425467e-02  7.43090617e-02]\n",
            " [-4.11626749e-03 -1.03278646e-02]\n",
            " [-2.48817783e-03 -4.89363010e-03]\n",
            " [ 2.70146690e-04  4.24148554e-04]\n",
            " [ 5.35996050e-05  1.03384719e-04]]\n"
          ]
        }
      ],
      "source": [
        "print(np.hstack([theta_ml, theta_map]))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E-3fOpXryimj"
      },
      "source": [
        "Now, let us compute the RMSE for different polynomial degrees and see whether the MAP estimate addresses the overfitting issue we encountered with the maximum likelihood estimate."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "MIVvInUSyimj",
        "outputId": "d7b9bad5-c998-459f-dba5-5215047ab766",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-24-b8a6eb8cbaf0>:11: LinAlgWarning: Ill-conditioned matrix (rcond=1.82839e-17): result may not be accurate.\n",
            "  theta_map = scipy.linalg.solve(np.dot(Phi.T, Phi) + (sigma/alpha)**2 * np.eye(D), np.dot(Phi.T, y))\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7f693c59adc0>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZ8AAAEGCAYAAAC6i5gfAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAAsTAAALEwEAmpwYAABDQklEQVR4nO3dd3hVVdbA4d9KhySEHkoooZfQBBFpYgcExILCYEEso2MfHUcdFXTUz+7M6FgQEBwQVJqgqGBBRJEqSruhJhBIgQDJTSD17u+PcwMhpOe2JOt9njy595xz91kHY1b2PvusLcYYlFJKKU/y83YASimlah9NPkoppTxOk49SSimP0+SjlFLK4zT5KKWU8rgAbwdQXTRu3Ni0bdvW22EopVS1sWnTpqPGmCbF7dPkU05t27Zl48aN3g5DKaWqDRGJL2mfDrsppZTyOE0+SimlPE6Tj1JKKY/Tez5VkJubS0JCAllZWd4ORfmYkJAQoqKiCAwM9HYoSvkkTT5VkJCQQHh4OG3btkVEvB2O8hHGGFJTU0lISCA6Otrb4Sjlk3TYrQqysrJo1KiRJh51FhGhUaNG2iNWqhSafKpIE48qjv5cKFU6TT5KKaWK9UNsCu+u2ku+w/VL72jyqeZEhJtuuun0+7y8PJo0acKoUaMq1d7SpUt56aWXXBVehQ0bNuz0w7wjR47kxIkTxMXFERMTU+42pk6dymuvvQbAM888w7fffgtYDwofPXrU5TG7q12lvO3LPxKZ+fN+/P1c35PXCQfVXGhoKNu2bePUqVPUqVOHlStX0rJly0q3N2bMGMaMGePCCCtv+fLlAJw4caLSbTz33HMuikap2seWlE6XZuFuaVt7PjXAyJEj+fLLLwGYN28eEyZMOL1v/fr1XHjhhfTp04eBAwcSGxsLwJtvvsnkyZMB2Lp1KzExMZw8eZJZs2Zx3333ATBp0iTuueceBgwYQLt27Vi1ahWTJ0+ma9euTJo06fQ5wsLCTr9esGDB6X3l/XxJiutR7Nu3jz59+rBhwwb27t3L8OHD6du3L0OGDMFms53TxqRJk1iwYMHp92+99RbnnXcePXr0OH38sWPHGDt2LD179mTAgAH88ccfpW5PTU3liiuuoHv37txxxx3oasCqJsrLd7A7OcNtyUd7Pi7y7LLt7Dic7tI2u7Wox5TR3cs8bvz48Tz33HOMGjWKP/74g8mTJ/PTTz8B0KVLF3766ScCAgL49ttvefLJJ1m4cCEPPvggw4YNY/Hixbzwwgu8//771K1b95y2jx8/ztq1a1m6dCljxozh559/Zvr06Zx//vls2bKF3r17lxpbVT9fWGxsLOPHj2fWrFn06tWLSy+9lPfee4+OHTuybt06/vKXv/D999+X2kbjxo3ZvHkz77zzDq+99hrTp09nypQp9OnThyVLlvD9999zyy23sGXLlhK3P/vsswwePJhnnnmGL7/8khkzZpT7GpSqLuJST5Kd56BLs3puaV+TTw3Qs2dP4uLimDdvHiNHjjxrX1paGrfeeiu7d+9GRMjNzQXAz8+PWbNm0bNnT/785z8zaNCgYtsePXo0IkKPHj2IjIykR48eAHTv3p24uLgyk0dVP1/gyJEjXH311SxatIhu3bqRkZHBL7/8wrhx404fk52dXWY71157LQB9+/Zl0aJFAKxZs4aFCxcCcMkll5Camkp6enqJ21evXn36s1dddRUNGjQo1zUoVZ3Ykqw/pjtrz8e3laeH4k5jxozh0UcfZdWqVaSmpp7e/vTTT3PxxRezePFi4uLiGDZs2Ol9u3fvJiwsjMOHD5fYbnBwMGAlq4LXBe/z8vKAs6cVF322pTyfL4+IiAhat27NmjVr6NatGw6Hg/r167Nly5Zyt1E4Hn9//wqdX6naJjbJjr+f0KFpWNkHV4Le86khJk+ezJQpU073LAqkpaWdnoAwa9ass7Y/8MADrF69mtTU1LPui1RUZGQkO3fuxOFwsHjx4kq3U5qgoCAWL17MRx99xMcff0y9evWIjo7ms88+A6yqAr///nul2h4yZAhz584FYNWqVTRu3Jh69eqVuH3o0KF8/PHHAHz11VccP37cBVeolG/ZmWinXeNQQgL93dK+9nxqiKioKB544IFztj/22GPceuutPP/881x11VWntz/88MPce++9dOrUiRkzZnDxxRczdOjQSp37pZdeYtSoUTRp0oR+/fqRkZFR6esoTWhoKF988QWXX345YWFhzJ07l3vuuYfnn3+e3Nxcxo8fT69evSrc7tSpU5k8eTI9e/akbt26zJ49u9TtU6ZMYcKECXTv3p2BAwfSunVrl16nUr7AlpTOeVFhYAy44aFp0Zk65dOvXz9TdDG5nTt30rVrVy9FpHyd/nyo6sqelUuPqStY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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "## EDIT THIS CELL\n",
        "\n",
        "K_max = 12 # this is the maximum degree of polynomial we will consider\n",
        "assert(K_max < N) # this is the latest point when we'll run into numerical problems\n",
        "\n",
        "rmse_mle = np.zeros((K_max+1,))\n",
        "rmse_map = np.zeros((K_max+1,))\n",
        "\n",
        "for k in range(K_max+1):\n",
        "   \n",
        "    \n",
        "    # feature matrix\n",
        "    Phi = poly_features(X, k)\n",
        "    \n",
        "    # maximum likelihood estimate\n",
        "    theta_ml = nonlinear_features_maximum_likelihood(Phi, y)\n",
        "    Phi_test = poly_features(Xtest, k)\n",
        "    ypred_test_mle = np.dot(Phi_test, theta_ml)\n",
        "\n",
        "    rmse_mle[k] = RMSE(ytest, ypred_test_mle)\n",
        "    \n",
        "    # MAP estimate\n",
        "    theta_map = map_estimate_poly(Phi, y, sigma, alpha)\n",
        "    Phi_test = poly_features(Xtest, k)\n",
        "    ypred_test_map = np.dot(Phi_test, theta_map)\n",
        "    \n",
        "    rmse_map[k] = RMSE(ytest, ypred_test_map)\n",
        "    \n",
        "\n",
        "plt.figure()\n",
        "plt.semilogy(rmse_mle) # this plots the RMSE on a logarithmic scale\n",
        "plt.semilogy(rmse_map) # this plots the RMSE on a logarithmic scale\n",
        "plt.xlabel(\"degree of polynomial\")\n",
        "plt.ylabel(\"RMSE\")\n",
        "plt.legend([\"Maximum likelihood\", \"MAP\"])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eFDGYwPoyimj"
      },
      "source": [
        "#### Questions:\n",
        "1. What do you observe?\n",
        "2. What is the influence of the prior variance on the parameters ($\\alpha^2$)? Change the parameter and describe what happens."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7WZMzGiNyimj"
      },
      "source": [
        "## 3. Bayesian Linear Regression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "q4g9CGlkyimk"
      },
      "outputs": [],
      "source": [
        "# Test inputs\n",
        "Ntest = 200\n",
        "Xtest = np.linspace(-5, 5, Ntest).reshape(-1,1) # test inputs\n",
        "\n",
        "prior_var = 2.0 # variance of the parameter prior (alpha^2). We assume this is known.\n",
        "noise_var = 1.0 # noise variance (sigma^2). We assume this is known.\n",
        "\n",
        "pol_deg = 3 # degree of the polynomial we consider at the moment"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YdqVyXgNyimk"
      },
      "source": [
        "Assume a parameter prior $p(\\boldsymbol\\theta) = \\mathcal N (\\boldsymbol 0, \\alpha^2\\boldsymbol I)$. For every test input $\\boldsymbol x_*$ we obtain the \n",
        "prior mean\n",
        "$$\n",
        "E[f(\\boldsymbol x_*)] = 0\n",
        "$$\n",
        "and the prior (marginal) variance (ignoring the noise contribution)\n",
        "$$\n",
        "V[f(\\boldsymbol x_*)] = \\alpha^2\\boldsymbol\\phi(\\boldsymbol x_*) \\boldsymbol\\phi(\\boldsymbol x_*)^\\top\n",
        "$$\n",
        "where $\\boldsymbol\\phi(\\cdot)$ is the feature map."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "wKcy6BP5yimk",
        "outputId": "372835ca-75f2-4898-c93a-67d91ef936c0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "## EDIT THIS CELL\n",
        "\n",
        "# compute the feature matrix for the test inputs\n",
        "Phi_test = poly_features(Xtest, pol_deg) # N x (pol_deg+1) feature matrix \n",
        "\n",
        "# compute the (marginal) prior at the test input locations\n",
        "# prior mean\n",
        "prior_mean = np.zeros((Ntest,1))  # prior mean at test inputs (size: (Ntest,1))\n",
        "\n",
        "# prior variance\n",
        "full_covariance = np.dot(Phi_test, Phi_test.T) * prior_var # N x N covariance matrix of all function values\n",
        "prior_marginal_var =  np.diag(full_covariance)\n",
        "\n",
        "# Let us visualize the prior over functions\n",
        "plt.figure()\n",
        "plt.plot(Xtest, prior_mean, color=\"k\")\n",
        "\n",
        "conf_bound1 = np.sqrt(prior_marginal_var).flatten()\n",
        "conf_bound2 = 2.0*np.sqrt(prior_marginal_var).flatten()\n",
        "conf_bound3 = 2.0*np.sqrt(prior_marginal_var + noise_var).flatten()\n",
        "plt.fill_between(Xtest.flatten(), prior_mean.flatten() + conf_bound1, \n",
        "             prior_mean.flatten() - conf_bound1, alpha = 0.1, color=\"k\")\n",
        "plt.fill_between(Xtest.flatten(), prior_mean.flatten() + conf_bound2, \n",
        "                 prior_mean.flatten() - conf_bound2, alpha = 0.1, color=\"k\")\n",
        "plt.fill_between(Xtest.flatten(), prior_mean.flatten() + conf_bound3, \n",
        "                 prior_mean.flatten() - conf_bound3, alpha = 0.1, color=\"k\")\n",
        "\n",
        "plt.xlabel('$x$')\n",
        "plt.ylabel('$y$')\n",
        "plt.title(\"Prior over functions\");"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KboVblcgyimk"
      },
      "source": [
        "Now, we will use this prior distribution and sample functions from it."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "tbu_4PAMyimk",
        "outputId": "652e56dc-d90e-4102-995c-7abce74e8159",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Every sampled function is a polynomial of degree 3\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "## EDIT THIS CELL\n",
        "\n",
        "# samples from the prior\n",
        "num_samples = 10\n",
        "\n",
        "# We first need to generate random weights theta_i, which we sample from the parameter prior\n",
        "random_weights = np.random.normal(size=(pol_deg+1,num_samples), scale=np.sqrt(prior_var))\n",
        "\n",
        "# Now, we compute the induced random functions, evaluated at the test input locations\n",
        "# Every function sample is given as f_i = Phi * theta_i, \n",
        "# where theta_i is a sample from the parameter prior\n",
        "\n",
        "sample_function = np.dot(Phi_test, random_weights)\n",
        "\n",
        "plt.figure()\n",
        "plt.plot(Xtest, sample_function, color=\"r\")\n",
        "plt.title(\"Plausible functions under the prior\")\n",
        "print(\"Every sampled function is a polynomial of degree \"+str(pol_deg));"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YsVJdAx8yiml"
      },
      "source": [
        "Now we are given some training inputs $\\boldsymbol x_1, \\dotsc, \\boldsymbol x_N$, which we collect in a matrix $\\boldsymbol X = [\\boldsymbol x_1, \\dotsc, \\boldsymbol x_N]^\\top\\in\\mathbb{R}^{N\\times D}$"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "Hvi6Uh0Fyiml"
      },
      "outputs": [],
      "source": [
        "N = 10\n",
        "X = np.random.uniform(high=5, low=-5, size=(N,1)) # training inputs, size Nx1\n",
        "y = g(X, np.sqrt(noise_var)) # training targets, size Nx1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C5CRfkJVyiml"
      },
      "source": [
        "Now, let us compute the posterior "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "tqe0SZy1yiml"
      },
      "outputs": [],
      "source": [
        "## EDIT THIS FUNCTION\n",
        "\n",
        "def polyfit(X, y, K, prior_var, noise_var):\n",
        "    # X: training inputs, size N x D\n",
        "    # y: training targets, size N x 1\n",
        "    # K: degree of polynomial we consider\n",
        "    # prior_var: prior variance of the parameter distribution\n",
        "    # sigma: noise variance\n",
        "    \n",
        "    jitter = 1e-08 # increases numerical stability\n",
        "    \n",
        "    Phi = poly_features(X, K) # N x (K+1) feature matrix \n",
        "    \n",
        "    # Compute maximum likelihood estimate\n",
        "    MLE1 = np.dot(Phi.T, y) \n",
        "    MLE2 = np.dot(Phi.T, Phi) + jitter*np.eye(K+1)\n",
        "    theta_ml = scipy.linalg.cho_solve(scipy.linalg.cho_factor(MLE2), MLE1)\n",
        "    \n",
        "    # MAP estimate\n",
        "    theta_map = scipy.linalg.solve(MLE2 + noise_var/prior_var*np.eye(K+1), MLE1)\n",
        "    \n",
        "    # Parameter posterior\n",
        "    iSN = (np.eye(K+1)/prior_var + MLE2/noise_var)\n",
        "    SN = scipy.linalg.pinv(noise_var*np.eye(K+1)/prior_var + MLE2)*noise_var\n",
        "    mN = scipy.linalg.solve(iSN, MLE1/noise_var)\n",
        "    \n",
        "    return (theta_ml, theta_map, mN, SN)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "xTxCKpC_yiml"
      },
      "outputs": [],
      "source": [
        "theta_ml, theta_map, theta_mean, theta_var = polyfit(X, y, pol_deg, alpha, sigma)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oJbNFf1Syimm"
      },
      "source": [
        "Now, let's make predictions (ignoring the measurement noise). We obtain three predictors:\n",
        "\\begin{align}\n",
        "&\\text{Maximum likelihood: }E[f(\\boldsymbol X_{\\text{test}})] = \\boldsymbol \\phi(X_{\\text{test}})\\boldsymbol \\theta_{ml}\\\\\n",
        "&\\text{Maximum a posteriori: } E[f(\\boldsymbol X_{\\text{test}})] = \\boldsymbol \\phi(X_{\\text{test}})\\boldsymbol \\theta_{map}\\\\\n",
        "&\\text{Bayesian: } p(f(\\boldsymbol X_{\\text{test}})) = \\mathcal N(f(\\boldsymbol X_{\\text{test}}) \\,|\\, \\boldsymbol \\phi(X_{\\text{test}}) \\boldsymbol\\theta_{\\text{mean}},\\, \\boldsymbol\\phi(X_{\\text{test}}) \\boldsymbol\\theta_{\\text{var}}  \\boldsymbol\\phi(X_{\\text{test}})^\\top)\n",
        "\\end{align}\n",
        "We already computed all quantities. Write some code that implements all three predictors."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "u5JqE2Ajyimm"
      },
      "outputs": [],
      "source": [
        "## EDIT THIS CELL\n",
        "\n",
        "# predictions (ignoring the measurement/observations noise)\n",
        "\n",
        "Phi_test = poly_features(Xtest, pol_deg) # N x (K+1)\n",
        "\n",
        "# maximum likelihood predictions (just the mean)\n",
        "m_mle_test = np.dot(Phi_test, theta_ml)\n",
        "\n",
        "# MAP predictions (just the mean)\n",
        "m_map_test = np.dot(Phi_test, theta_map)\n",
        "\n",
        "# predictive distribution (Bayesian linear regression)\n",
        "# mean prediction\n",
        "mean_blr = np.dot(Phi_test, theta_mean)\n",
        "# variance prediction\n",
        "cov_blr =  Phi_test @ theta_var @ Phi_test.T"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "id": "z1IHv-ojyimm",
        "outputId": "db7da359-459d-4885-a99b-ffe69de6e027",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        }
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# plot the posterior\n",
        "plt.figure()\n",
        "plt.plot(X, y, \"+\")\n",
        "plt.plot(Xtest, m_mle_test)\n",
        "plt.plot(Xtest, m_map_test)\n",
        "var_blr = np.diag(cov_blr)\n",
        "conf_bound1 = np.sqrt(var_blr).flatten()\n",
        "conf_bound2 = 2.0*np.sqrt(var_blr).flatten()\n",
        "conf_bound3 = 2.0*np.sqrt(var_blr + sigma).flatten()\n",
        "\n",
        "plt.fill_between(Xtest.flatten(), mean_blr.flatten() + conf_bound1, \n",
        "                 mean_blr.flatten() - conf_bound1, alpha = 0.1, color=\"k\")\n",
        "plt.fill_between(Xtest.flatten(), mean_blr.flatten() + conf_bound2, \n",
        "                 mean_blr.flatten() - conf_bound2, alpha = 0.1, color=\"k\")\n",
        "plt.fill_between(Xtest.flatten(), mean_blr.flatten() + conf_bound3, \n",
        "                 mean_blr.flatten() - conf_bound3, alpha = 0.1, color=\"k\")\n",
        "plt.legend([\"Training data\", \"MLE\", \"MAP\", \"BLR\"])\n",
        "plt.xlabel('$x$');\n",
        "plt.ylabel('$y$');"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.7"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}